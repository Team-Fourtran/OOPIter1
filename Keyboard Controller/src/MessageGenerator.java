import java.util.ArrayList;
import java.util.ListIterator;
import java.util.Scanner;

public class MessageGenerator {
	private ArrayList<Mode> modes = new ArrayList<Mode>();
	private ListIterator<Mode> modeIterator;
	
	private Mode currentMode;
	
	private Controller receiver; 
	
	public MessageGenerator(Controller receiver){
		initializeModes();
		this.receiver = receiver;
		
		listenToKeyboard();
	}
	
	private void listenToKeyboard(){
		//Runs perpetually
		System.out.println("Syntax:\n\t'UP','DOWN','LEFT','RIGHT','CONTROL','ENTER'\n\t(Space-separated)");
		Scanner s = new Scanner(System.in);
		
		while(true){
			/*TODO: Get actual keyboard input. For now just prompts for keystrokes */
			System.out.println("Enter simulated keystrokes: ");
			ArrayList<String> inputs = new ArrayList<String>();
			while(s.hasNext()){
				inputs.add(s.next());
				System.out.println("Keystrokes: " + inputs);

				
			}
			
			System.out.println("Final Keystrokes: " + inputs);
		}
	}
	
	protected void generateMessage(){
		//Sends receiver a message as generated by the current Mode
		receiver.handleMsg(this.currentMode.generateMessage());
	}
	
	private void initializeModes(){
		//Fill this.modes with the 4 modes
		this.modes.add((Mode) new UnitMode());
		this.modes.add((Mode) new StructureMode());
		this.modes.add((Mode) new RallyPointMode());
		this.modes.add((Mode) new ArmyMode());
		
		//Create an iterator for the list, initialized with the first element
		this.modeIterator = this.modes.listIterator(0);
	}
	
	//Switches the mode to the next mode on the list, looping back around when the end is reached.
	private void nextMode(){
		if(this.modeIterator.hasNext()){
			this.currentMode = this.modeIterator.next(); //Move to next mode if it exists
		} else{
			while(this.modeIterator.hasPrevious()){	//else go back to the first mode
				this.currentMode = this.modeIterator.previous();
			}
		}
	}
	
	//Switches the mode to the previous mode on the list, looping back around when the beginning is reached.
	private void previousMode(){
		if(this.modeIterator.hasPrevious()){
			this.currentMode = this.modeIterator.previous();	//move to prev. mode if it exists
		} else{
			while(this.modeIterator.hasNext()){		//else go back to the last one
				this.currentMode = this.modeIterator.next();
			}
		}
	}
}

interface Mode{
	
	String generateMessage();
	/*
	void leftKey();
	void rightKey();
	void upKey();
	void downKey();
	
	void controlLeft();
	void controlRight();
	*/
	public String toString();
}

class UnitMode implements Mode{
	public String toString(){
		return "I am in Unit Mode";
	}
	
	public String generateMessage(){
		return "Generated message: " + this.toString();
	}
}

class StructureMode implements Mode{
	public String toString(){
		return "I am in Structure Mode";
	}
	
	public String generateMessage(){
		return "Generated message: " + this.toString();
	}
}

class RallyPointMode implements Mode{
	public String toString(){
		return "I am in RallyPoint Mode";
	}
	
	public String generateMessage(){
		return "Generated message: " + this.toString();
	}
}

class ArmyMode implements Mode{
	public String toString(){
		return currentSubMode.toString();
	}
	
	public String generateMessage(){
		return "Generated message: " + this.toString();
	}
	
	private ArrayList<Mode> subModes = new ArrayList<Mode>();
	private Mode currentSubMode;
	
}

class EntireArmyMode implements Mode{
	public String toString(){
		return "I am in EntireArmy Mode";
	}
	
	public String generateMessage(){
		return "Generated message: " + this.toString();
	}
}

class BattleGroupMode implements Mode{
	public String toString(){
		return "I am in BattleGroup Mode";
	}
	
	public String generateMessage(){
		return "Generated message: " + this.toString();
	}
}

class ReinforcementMode implements Mode{
	public String toString(){
		return "I am in Reinforcement Mode";
	}
	
	public String generateMessage(){
		return "Generated message: " + this.toString();
	}
}